#include <iostream>
#include <pthread.h>
#include <cstdlib>
#include <cmath>

using namespace std;

int t_points;
int p_circle;
int n_thread;
pthread_mutex_t mutex;

void *runner(void *ptr){

    for(int i=0;i<t_points;i++){

        double x = 2*((double)rand()/(double)(RAND_MAX)) - 1;
        double y = 2*((double)rand()/(double)(RAND_MAX)) - 1;

        if(sqrt(x*x + y*y) <= 1.0){
            pthread_mutex_lock(&mutex);
            ++p_circle;
            pthread_mutex_unlock(&mutex);
        }
    }

    pthread_exit(0);
}


int main(){

    pthread_t *tid;
    p_circle = 0;

    pthread_mutex_init(&mutex, NULL);

    cout << "Number of points generated by each thread: ";
    cin >> t_points;

    cout << "Number of threads: ";
    cin >> n_thread;

    tid = (pthread_t *)malloc(n_thread*sizeof(pthread_t));

    for(int i=0;i<n_thread;i++)
        pthread_create(&tid[i], NULL, runner, NULL);

    for(int i=0;i<n_thread;i++)
        pthread_join(tid[i], NULL);

    cout << "Pi = " << 4.0*(p_circle)/(1.0*n_thread*t_points) << endl;

    return 0;
}

